#!/bin/bash

set -euo pipefail

db_host=${POSTGRES_HOST:-db}
db_port=${POSTGRES_PORT:-5432}
db_user=${POSTGRES_USER:-geonatuser}
db_pass=${POSTGRES_PASSWORD:-monpassachanger}
db_name=${POSTGRES_DB:-geonature2db}

function database_exists () {
    # /!\ Will return false if psql can't list database. Edit your pg_hba.conf
    # as appropriate.
    PGPASSWORD=$db_pass psql -h $db_host -p $db_port -U $db_user -tAl | grep -q "^$1|"
    return $?
}

function schema_exists () {
    q="SELECT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = '$1');"
    r=`PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -X -A -t -c "$q"`
    if [ $r == 't' ]; then
      true
    else 
      false
    fi
}

function create_usershub_db () {
    echo "Création de la base de données $db_name"
    PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -c "CREATE DATABASE $db_name;"
}

function create_usershub_schema () {
    echo "Ajout du language plpgsql et de l'extension pour les UUID..."
    PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -c "CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog; COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';"
    PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
    # Mise en place de la structure de la base et des données permettant son fonctionnement avec l'application
    echo "Création de la structure de la base de données..."
    PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -f data/usershub.sql 
    if ${INSERT_MINIMAN_DATA:-true}
        then
            echo "Insertion des données minimales dans la base de données..."
            PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -f data/usershub-data.sql
    fi
    if ${INSERT_SAMPLE_DATA:-true}
        then
            echo "Insertion des données exemple dans la base de données..."
            PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name -f data/usershub-dataset.sql
    fi
}

until pg_isready -h $db_host -p $db_port
do
  echo "Awaiting Database container"
  sleep 1
done
sleep 2


if database_exists $db_name; then
    if ${DROP_APPS_DB:-false}
        then
        echo "Suppression de la base..."
        PGPASSWORD=$db_pass psql -h $db_host -U $db_user -p $db_port -d $db_name "DROP DATABASE IF EXISTS $db_name";
	create_usershub_db
	create_usershub_schema
    else
        if ! schema_exists utilisateurs; then
            echo "Le schéma utilisateur existe déjà, aucune action ne sera effectuée"
	    create_usershub_schema
	else
            echo "La base de données et le schéma utilisateurs existe déjà, aucune modification ne sera effectuée"
        fi
    fi
fi

if ! database_exists $db_name; then
	create_usershub_db
	create_usershub_schema
fi

if [ ! -f ./config/config.py ]; then
    echo "generate config file"
    echo "# Config generated by docker-entrypoint.sh" >> ./config/config.py
    echo "SQLALCHEMY_DATABASE_URI = \"postgresql://$db_user:$db_pass@$db_host:$db_port/$db_name\"" >> ./config/config.py
    echo "SQLALCHEMY_TRACK_MODIFICATIONS = False" >> ./config/config.py
    echo "URL_APPLICATION = '${URL:-http://localhost:5001}'" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "# Liste d'URL depuis lesquels on accepte des requetes croisées" >> ./config/config.py
    echo "URLS_COR = ['http://localhost:5000']" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "SECRET_KEY = '${SECRETKEY:-$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c50)}'" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "# ID of UsersHub application" >> ./config/config.py
    echo "ID_APP = ${ID_APP:-1}" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "# Authentification crypting method (hash or md5)" >> ./config/config.py
    echo "PASS_METHOD = '${PASS_METHOD:-hash}'" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "FILL_MD5_PASS=${FILL_MD5_PASS:-False}" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "COOKIE_EXPIRATION = ${COOKIE_EXPIRATION:-3600}" >> ./config/config.py
    echo "COOKIE_AUTORENEW = ${COOKIE_AUTORENEW:-True}" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "PORT = ${PORT:-5001}" >> ./config/config.py
    echo "DEBUG = ${DEBUG:-False}" >> ./config/config.py
    echo "" >> ./config/config.py
    echo "ACTIVATE_API = ${ACTIVATE_API:-True}" >> ./config/config.py
    echo "ACTIVATE_APP = ${ACTIVATE_APP:-True}" >> ./config/config.py
else
    echo "config file already exists"
fi

# Start App
echo ""
echo "READY TO START USERSHUB APPLICATION ON PORT ${PORT:-5001}"
echo ""
gunicorn -w ${WORKERS:-1} --access-logfile - -b 0.0.0.0:${PORT:-5001} server:app
